import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.GraphicsEnvironment;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.Window;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.border.EmptyBorder;

import org.json.JSONObject;


public class InfoFrame extends JFrame{

	public static JTextArea console;
	public JLabel[][] grid;
	public JSONObject json;
	public int screenWidth;
	public int screenHeight;
	public InfoFrame(JSONObject json) throws Exception
	{
		super("Middle School Javascript");
		this.json = json;
		grid = new JLabel[10][10];
		for(int i = 0; i < 10; i++){
			for(int j = 0; j < 10; j++)
			{
				grid[i][j] = new JLabel();
			}
		}
		setExtendedState(JFrame.MAXIMIZED_BOTH);
		setVisible(true);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		JPanel pane = new JPanel(new BorderLayout());
		add(pane);
		
		JLabel title = new JLabel("MSJS");
		title.setHorizontalAlignment(SwingConstants.CENTER);
		
		Font logoFont = null;
		try
		{
			logoFont = Font.createFont(Font.TRUETYPE_FONT, getClass().getResourceAsStream("Resources/Raleway-SemiBold.ttf"));
		}
		catch(Exception e)
		{
			
		}
		logoFont = logoFont.deriveFont(Font.PLAIN, 50);
		GraphicsEnvironment environ = GraphicsEnvironment.getLocalGraphicsEnvironment();
		environ.registerFont(logoFont);
		title.setFont(logoFont);
		Color titleColor = new Color(255,84,9);
		title.setForeground(titleColor);
		
		screenWidth = java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment().getMaximumWindowBounds().width;
		screenHeight = java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment().getMaximumWindowBounds().height;
		
		title.setBounds(0,0,(int)(screenWidth), (int)(screenHeight * 0.15));
		pane.add(title, BorderLayout.NORTH);
		
		JPanel bottom = new JPanel(new BorderLayout());
		JPanel left = new JPanel(new BorderLayout());
		JPanel right = new JPanel();
		JPanel gridPanel = new JPanel(new GridLayout(10,10));
		
		
		//String string = "Hero hero1 = new Hero();\nhero1.setx(1);\nhero1.sety(0);\nVillain villain1 = new Villain();\nvillain1.setx(0);\nvillain.sety(1);";
		console = new JTextArea();
		console.setPreferredSize(new Dimension((int)(screenWidth * 0.4), (int)(screenHeight * 0.7)));
		console.setBorder(BorderFactory.createLineBorder(Color.DARK_GRAY, 6, false));
		
		left.setBorder(new EmptyBorder((int)(screenWidth * 0.05),(int)(screenWidth * 0.05),(int)(screenWidth * 0.05),(int)(screenWidth * 0.05)));
		
		left.add(console, BorderLayout.NORTH);
		left.add(new ButtonPanel(), BorderLayout.SOUTH);
		bottom.add(left, BorderLayout.WEST);
		
		Color gridColor = new Color(8,229,202);
		gridPanel.setBackground(gridColor);
		gridPanel.setPreferredSize(new Dimension((int)(screenWidth * 0.4), (int)(screenHeight * 0.7)));
		gridPanel.setBorder(BorderFactory.createEmptyBorder(2,2,2,2));
		gridPanel.setBorder(BorderFactory.createLineBorder(Color.DARK_GRAY, 6, false));
		String consoleText = "var window = Window;";
		for(int i = 0; i < 10; i++){
			for(int j = 0; j < 10; j++){
				for(int k = 0; k < json.getJSONArray("sprites").length(); k++){
					if(json.getJSONArray("sprites").getJSONObject(k).getInt("x") == i && json.getJSONArray("sprites").getJSONObject(k).getInt("y") == j)
					{
						if(json.getJSONArray("sprites").getJSONObject(k).get("type").equals("friendly"))
						{
							consoleText += "\nvar hero" + (k + 1) + " = Sprite.create(\"hero\");\n";
							consoleText += "hero" + (k + 1) + ".setXCoords(" + json.getJSONArray("sprites").getJSONObject(k).getInt("x") + ");\n";
							consoleText += "hero" + (k + 1) + ".setYCoords(" + json.getJSONArray("sprites").getJSONObject(k).getInt("y") + ");\n";
							consoleText += "Window.grid[" + json.getJSONArray("sprites").getJSONObject(k).getInt("x") + "][" + json.getJSONArray("sprites").getJSONObject(k).getInt("y") + "] = hero" + (k + 1) + ";";
							
						}
						else if(json.getJSONArray("sprites").getJSONObject(k).get("type").equals("enemy"))
						{
							consoleText += "\nvar villain" + (k + 1) + " = Sprite.create(\"villain\");\n";
							consoleText += "villain" + (k + 1) + ".setXCoords(" + json.getJSONArray("sprites").getJSONObject(k).getInt("x") + ");\n";
							consoleText += "villain" + (k + 1) + ".setYCoords(" + json.getJSONArray("sprites").getJSONObject(k).getInt("y") + ");\n";
							consoleText += "Window.grid[" + json.getJSONArray("sprites").getJSONObject(k).getInt("x") + "][" + json.getJSONArray("sprites").getJSONObject(k).getInt("y") + "] = villain" + (k + 1) + ";";
							
						}
						else
							grid[i][j].setText("sprite");
							
					}
					
				}
				
				grid[i][j].setBorder(BorderFactory.createLineBorder(Color.DARK_GRAY));
				gridPanel.add(grid[i][j]);
				
				
			}
		}
		console.setText(consoleText);
		String userCode = InfoFrame.console.getText();
		ScriptEngineManager factory = new ScriptEngineManager();
		ScriptEngine engine = factory.getEngineByName("JavaScript");
		engine.put("Sprite", new Sprite());
		engine.put("Window", this);
		try {
			engine.eval(userCode);
			System.out.println(grid[0][1]);
		} catch (ScriptException e1) {
			e1.printStackTrace();
		}
		gridPanel.repaint();
		gridPanel.revalidate();
		//right.add(new Hero());
		right.add(gridPanel, SwingConstants.CENTER);
		right.setBorder(new EmptyBorder((int)(screenWidth * 0.05),(int)(screenWidth * 0.05),(int)(screenWidth * 0.05),(int)(screenWidth * 0.05)));
		bottom.add(right, BorderLayout.EAST);
		pane.add(bottom, BorderLayout.SOUTH);
		
		
		
	}
}
